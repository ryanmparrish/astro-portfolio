---
import Icon from './Icon.astro';
---

<theme-toggle>
  <svg class="filter" version="1.1">
    <defs>
      <filter id="gooeyness">
        <feGaussianBlur in="SourceGraphic" stdDeviation="8" result="blur" />
        <feColorMatrix in="blur" mode="matrix" values="1 0 0 0 0  0 1 0 0 0  0 0 1 0 0  0 0 0 20 -10" result="gooey" />
        <feComposite in="SourceGraphic" in2="gooey" operator="atop" />
      </filter>
    </defs>
  </svg>
  <div class="radios-boxes">
    <div class="radios">
      <input type="radio" name="radio" id="radio1" class="radio" value="light">
      <input type="radio" name="radio" id="radio2" class="radio" value="dark">
      <div class="ball"></div>
    </div>
    <div class="labels">
      <label for="radio1" class="label sun"><Icon icon="sun" /></label>
      <label for="radio2" class="label moon"><Icon icon="moon-stars" /></label>
    </div>
  </div>
</theme-toggle>

<style>
  
  .filter {
    position: absolute;
    left: -9999px;
  }

  /* Radio Boxes */
  .radios-boxes {
    display: block;
    position: relative;
  }

  .radios {
    filter: url('#gooeyness');
    overflow: hidden;
    position: relative;
  }
  .radios, 
  .labels {
    display: flex;
    flex-direction: row;
    text-align: center;
    position: relative;
    gap: .3rem;
  }
  .radio {
    -moz-appearance: none;
    -ms-appearance: none;
    -webkit-appearance: none;
    appearance: none;
    border-radius: 50%;
    border: 20px solid var(--accent-sun);
    cursor: pointer;
    height: 20px;
    width: 20px;
    outline: 0;
    -webkit-tap-highlight-color: transparent;
    transition: border-color 800ms;
    &:nth-child(2) {
      border-color: var(--accent-moon);
    }
  }

  .ball {
    border-radius: 50%;
    width: 20px;
    height: 20px;
    left: 8px;
    pointer-events: none;
    position: absolute;
    top: 10px;
    transform: translateX(0px);
    transition: transform 800ms;
  }

  .ball.pos0 {
    background: var(--accent-sun);
    transform: translateX(0px);
  }

  .ball.pos1 {
    background: var(--accent-moon);
    transform: translateX(52px);
  }

  .labels {
    position: absolute;
    top: 0px;
  }

  .label {
    color: var(--accent-dark);
    cursor: pointer;
    flex-direction: column;
    font-size: 24px;
    width: 40px;
    -webkit-tap-highlight-color: transparent;
    transition: color 800ms;
    &.moon {
      /* color: var(--accent-moon); */
      &:hover {
        color: var(--accent-dark);
      }
    }
  }
  .labels[aria-checked="false"] {
    .label.sun {
      cursor: default;
    }
  }
  .labels[aria-checked="true"] {
   .label.sun {
      &:hover {
        color: white;
      }
    }
    .label.moon {
      color: white;
      cursor: default;
    }
  }
 
	@media (prefers-reduced-motion: no-preference) {
		.label {
			transition:
				transform var(--theme-transition),
				color var(--theme-transition);
		}
	}

	@media (forced-colors: active) {
		.radio {
			border-color: SelectedItem;
		}
	}
</style>

<script>
	class ThemeToggle extends HTMLElement {
		constructor() {
			super();

			// Wait for the DOM to be fully loaded before initializing
			if (document.readyState === 'loading') {
				document.addEventListener('DOMContentLoaded', () => this.initialize());
			} else {
				this.initialize();
			}
		}

		initialize() {
			const ball = this.querySelector('.ball')!;
			const radios = this.querySelectorAll('.radio')!;
			const labelDiv = this.querySelector('.labels')!;
			let labels = this.querySelectorAll('.label');
			let prevRadio: HTMLElement | null = null, prevLabel: HTMLElement | null = null;

			/** Set the theme to dark/light mode. */
			const setTheme = (dark: boolean) => {
				document.documentElement.classList[dark ? 'add' : 'remove']('theme-dark');
				labelDiv.setAttribute('aria-checked', String(dark));
				ball.className = `ball pos${dark ? 1 : 0}`;
			};
			
			// radio buttons
			radios.forEach((radio, index) => {
				radio.addEventListener('click', function(e) {
					if (prevRadio) prevRadio.classList.toggle('active');
					if (prevLabel) prevLabel.classList.toggle('active');
					radio.classList.toggle('active');
					prevRadio = radio as HTMLElement;
					labels[index].classList.toggle('active');
					prevLabel = labels[index] as HTMLElement;
					setTheme(index === 1);
				});
			});

			setTimeout(() => {
				const isDarkMode = this.isDark();
				setTheme(isDarkMode);
			}, 0);
		}

		isDark() {
			return document.documentElement.classList.contains('theme-dark');
		}
	}
	customElements.define('theme-toggle', ThemeToggle);
</script>
