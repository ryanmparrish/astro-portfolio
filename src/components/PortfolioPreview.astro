---
import type { CollectionEntry } from 'astro:content';

interface Props {
	project: CollectionEntry<'work'>;
}

const { data, id } = Astro.props.project;

---
<div class="card-container">
	<a class="card" href={`/work/${id}`}>
		<span class="title">{data.title}</span>
    <div class="shader">
      <img src={data.img} alt={data.img_alt || ''} loading="lazy" decoding="async" />
      <div class="shader__layer specular">
        <div class="shader__layer mask" style=`background-image: url(${data.img_mask});`></div>
      </div>
    </div>
	</a>
</div>


<script>
	document.addEventListener("astro:page-load", () => {
		// Select the card element
		const cards = document.querySelectorAll('.card');
		cards.forEach(card => {
			// Add an event listener for when the mouse moves over the card
			card.addEventListener('mousemove', (e) => {
				const mouseEvent = e as MouseEvent;
				// Get the card's size and position relative to the viewport
				const cardRect = card.getBoundingClientRect();

				const x = mouseEvent.clientX - cardRect.left; // X coordinate within the card
				const y = mouseEvent.clientY - cardRect.top;  // Y coordinate within the card

				// Find the center of the card
				const centerX = cardRect.width / 2;
				const centerY = cardRect.height / 2;

				// Calculate the rotation angles based on mouse position
				// Multiply by 15 for a stronger tilt effect
				const rotateX = ((y - centerY) / centerY) * 15; // Tilt on the X-axis (up and down)
				const rotateY = ((centerX - x) / centerX) * 15; // Tilt on the Y-axis (left and right)

				// Apply the calculated rotation to the card
				(card as HTMLElement).style.transform = `rotateX(${rotateX}deg) rotateY(${rotateY}deg)`;
			});

			// Add an event listener for when the mouse leaves the card area
			card.addEventListener('mouseleave', () => {
				// Reset the card's rotation when the mouse leaves
				(card as HTMLElement).style.transform = 'rotateX(0) rotateY(0)';
			});
		});
	});
</script>

<style>

	.card-container {
		perspective: 1000px;
	}
	
	.card {
		position: relative;
		display: grid;
		grid-template: auto 1fr / auto 1fr;
		height: 11rem;
		background: var(--gradient-subtle);
		border: 1px solid var(--gray-800);
		border-radius: 0.75rem;
		overflow: hidden;
		box-shadow: var(--shadow-sm);
		text-decoration: none;
		font-family: var(--font-brand);
		font-size: var(--text-lg);
		font-weight: 500;
		transition: box-shadow var(--theme-transition), transform .2s ease;
		transform-style: preserve-3d;
		perspective: 1000px;
	}

	.card:hover {
		box-shadow: var(--shadow-md);
	}

	.title {
		grid-area: 1 / 1 / 2 / 2;
		z-index: 1;
		margin: 0.5rem 0.4rem;
		padding: 0.5rem 1rem;
		background: var(--gray-999);
		border: 1px solid var(--gray-800);
		color: var(--gray-200);
		border-radius: 0.55rem;
        /* transform: perspective(100px) translateZ(5px); */
	}

	.card:hover  {
    .title {
      color: var(--link-color);
      box-shadow: var(--shadow-sm);
    }
    .specular {
      opacity: 1;
    }
  }

	.shader, 
  .shader img {
		grid-area: 1 / 1 / 3 / 3;
		width: 100%;
		height: 100%;
		object-fit: cover;
	}
  
  .shader {
    position: relative;
    overflow: hidden;
    backface-visibility: hidden;
  }

  .shader__layer {
    background: black;
    position: absolute;
    left: 0;
    top: 0;
    width: 100%;
    height: 100%;
    background-size: 100%;
    background-position: center;
  }

  .specular {
    background-attachment: fixed;
    background-image: linear-gradient(180deg, black 20%, #3c5e6d 35%, #f4310e, #f58308 80%, black);
    mix-blend-mode: color-dodge;
    opacity: 0;
    transition: opacity 0.2s ease;
  }
  .mask {
    mix-blend-mode: multiply;
  }


	@media (min-width: 50em) {
		.card {
			height: 22rem;
			border-radius: 1.5rem;
		}

		.title {
			border-radius: 0.9375rem;
		}
	}
</style>
