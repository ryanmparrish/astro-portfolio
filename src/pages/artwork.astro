---
import BaseLayout from '../layouts/BaseLayout.astro';
import Hero from '../components/Hero.astro';
import Icon from '../components/Icon.astro';
import { readdir } from 'node:fs/promises';
import { join } from 'node:path';

// Get the current discipline from URL params
const currentDiscipline = Astro.url.searchParams.get('discipline')?.toLowerCase() || 'all';

// Define the type for our artwork metadata
interface ArtworkMetadata {
  src: string;
  title: string;
  discipline: string;
  year?: number;
  description?: string;
}

// Function to determine discipline from filename
function getDisciplineFromFilename(filename: string): string {
  const lowerFilename = filename.toLowerCase();
  if (lowerFilename.includes('painting')) return 'paintings';
  if (lowerFilename.includes('drawing')) return 'drawings';
  if (lowerFilename.includes('design')) return 'design';
  return 'other';
}

// Get the list of image files from the public directory
const artworkDir = join(process.cwd(), 'public', 'assets', 'artwork');
const files = await readdir(artworkDir);
const imageFiles = files.filter((file: string) => /\.(png|jpg|jpeg|gif|webp)$/i.test(file));

// Convert to metadata format
const images: ArtworkMetadata[] = imageFiles.map((filename: string) => {
  const nameWithoutExt = filename.split('.')[0];
  return {
    src: `/assets/artwork/${filename}`,
    title: nameWithoutExt.split('-').map((word: string) => word.charAt(0).toUpperCase() + word.slice(1)).join(' '),
    discipline: getDisciplineFromFilename(nameWithoutExt),
    description: ''
  };
});

// Get unique disciplines for filter buttons
const disciplines = [...new Set(images.map(img => img.discipline))];
---

<BaseLayout title="Artwork">
  <div class="stack gap-20">
		<main class="wrapper stack gap-8">
			<Hero
				title="Artwork"
				tagline="oldies but goodies"
				align="start"
			/>

      <div class="filters">
        <a 
          href="/artwork" 
          class={`filter-btn ${currentDiscipline === 'all' ? 'active' : ''}`} 
          data-discipline="all"
        >
          all
        </a>
        {disciplines.map(discipline => (
          <a 
            href={`/artwork?discipline=${encodeURIComponent(discipline)}`} 
            class={`filter-btn ${currentDiscipline === discipline ? 'active' : ''}`}
            data-discipline={discipline}
          >
            {discipline}
          </a>
        ))}
      </div>

      <div class="artwork-grid">
        {
          images.map((artwork, index) => (
            <div 
              class={`artwork-item ${currentDiscipline !== 'all' && currentDiscipline !== artwork.discipline ? 'hidden' : ''}`} 
              data-index={index} 
              data-discipline={artwork.discipline}
            >
              <button class="thumbnail">
                <img
                  src={artwork.src}
                  alt={artwork.title}
                  loading="lazy"
                />
                <div class="artwork-info">
                  <h3>{artwork.title}</h3>
                </div>
              </button>
              <div class="expanded-view">
                <button class="close-btn">
                  <span class="x-line"></span>
                  <span class="x-line"></span>
                </button>
                <button class="nav-btn prev">
                  <Icon icon="arrow-left" />
                </button>
                <button class="nav-btn next">
                  <Icon icon="arrow-right" />
                </button>
                <div class="expanded-content">
                  <img
                    src={artwork.src}
                    alt={artwork.title}
                    loading="lazy"
                  />
                  <div class="expanded-info">
                    <h2>{artwork.title}</h2>
                    {artwork.description && <p class="description">{artwork.description}</p>}
                  </div>
                </div>
              </div>
            </div>
          ))
        }
      </div>
    </main>
</BaseLayout>

<style>
  .filters {
    display: flex;
    gap: 0.5rem;
    flex-wrap: wrap;
    margin-bottom: 1rem;
  }

  .filter-btn {
    padding: 0.5rem 1rem;
    border: 1px solid var(--gray-800);
    border-radius: 0.5rem;
    background: none;
    color: var(--gray-300);
    cursor: pointer;
    transition: all 0.3s ease;
    text-decoration: none;
    text-transform: lowercase;
  }

  .filter-btn:hover {
    background: var(--gray-800);
    color: var(--gray-100);
  }

  .filter-btn.active {
    background: var(--accent-regular);
    color: var(--accent-text-over);
    border-color: var(--accent-regular);
  }

  .artwork-grid {
    display: grid;
    grid-template-columns: repeat(auto-fill, minmax(200px, 1fr));
    gap: 1rem;
    width: 100%;
  }

  .artwork-item {
    position: relative;
    aspect-ratio: 1;
    transition: opacity 0.3s ease;
  }

  .artwork-item.hidden {
    display: none;
  }

  .thumbnail {
    width: 100%;
    height: 100%;
    padding: 0;
    border: none;
    background: none;
    cursor: pointer;
    overflow: hidden;
    border-radius: 0.5rem;
    transition: transform 0.3s ease;
    position: relative;
  }

  .thumbnail:hover {
    transform: scale(1.05);
  }

  .thumbnail :global(img) {
    width: 100%;
    height: 100%;
    object-fit: cover;
  }

  .artwork-info {
    position: absolute;
    bottom: 0;
    left: 0;
    right: 0;
    padding: 1rem;
    background: linear-gradient(transparent, rgba(0, 0, 0, 0.8));
    color: white;
    opacity: 0;
    transition: opacity 0.3s ease;
  }

  .thumbnail:hover .artwork-info {
    opacity: 1;
  }

  .artwork-info h3 {
    font-size: var(--text-sm);
    margin: 0;
  }

  .artwork-info p {
    font-size: var(--text-xs);
    margin: 0.25rem 0 0;
    opacity: 0.8;
  }

  .expanded-view {
    display: none;
    position: fixed;
    top: 0;
    left: 0;
    width: 100%;
    height: 100%;
    background: rgba(0, 0, 0, 0.9);
    z-index: 10000;
    padding: 2rem;
  }

  .expanded-view.active {
    display: flex;
    align-items: center;
    justify-content: center;
  }

  .expanded-content {
    max-width: 90%;
    max-height: 90vh;
    display: flex;
    flex-direction: column;
    gap: 1rem;
  }

  .expanded-content :global(img) {
    max-width: 100%;
    max-height: 80vh;
    object-fit: contain;
  }

  .expanded-info {
    color: white;
    text-align: center;
  }

  .expanded-info h2 {
    font-size: var(--text-xl);
    margin: 0;
  }

  .expanded-info p {
    margin: 0.5rem 0 0;
    opacity: 0.8;
  }

  .expanded-info .description {
    margin-top: 1rem;
    font-size: var(--text-md);
  }

  .close-btn {
    position: absolute;
    top: 1rem;
    right: 1rem;
    background: none;
    border: none;
    color: white;
    cursor: pointer;
    padding: 0.5rem;
    width: 2rem;
    height: 2rem;
    display: flex;
    align-items: center;
    justify-content: center;
    z-index: 10001;
  }

  .x-line {
    position: absolute;
    width: 100%;
    height: 2px;
    background-color: white;
    transition: transform 0.3s ease;
  }

  .x-line:first-child {
    transform: rotate(45deg);
  }

  .x-line:last-child {
    transform: rotate(-45deg);
  }

  .close-btn:hover .x-line:first-child {
    transform: rotate(225deg);
  }

  .close-btn:hover .x-line:last-child {
    transform: rotate(135deg);
  }

  .nav-btn {
    position: absolute;
    top: 50%;
    transform: translateY(-50%);
    background: none;
    border: none;
    color: white;
    cursor: pointer;
    padding: 1rem;
    font-size: 1.5rem;
    opacity: 0.5;
    transition: all 0.3s ease;
  }

  .nav-btn.prev {
    left: 1rem;
  }

  .nav-btn.next {
    right: 1rem;
  }

  .nav-btn:hover {
    opacity: 1;
  }

  .nav-btn.prev:hover {
    transform: translateY(-50%) translateX(5px);
  }

  .nav-btn.next:hover {
    transform: translateY(-50%) translateX(-5px);
  }

  .nav-btn::before {
    content: '';
    position: absolute;
    top: 50%;
    left: 50%;
    width: 100%;
    height: 100%;
    background: rgba(255, 255, 255, 0.1);
    border-radius: 50%;
    transform: translate(-50%, -50%) scale(0);
    transition: transform 0.3s ease;
  }

  .nav-btn:hover::before {
    transform: translate(-50%, -50%) scale(1);
  }

  @media (min-width: 50em) {
    .artwork-grid {
      grid-template-columns: repeat(auto-fill, minmax(250px, 1fr));
      gap: 2rem;
    }

    .expanded-content {
      flex-direction: column;
      align-items: center;
      gap: 2rem;
    }

    .expanded-content :global(img) {
      max-width: 70%;
    }
  }
</style>

<script>
  document.addEventListener('astro:page-load', () => {
    const items = document.querySelectorAll('.artwork-item');
    const filterButtons = document.querySelectorAll('.filter-btn');
    let currentIndex = 0;

    // Set initial active state from URL
    const urlParams = new URLSearchParams(window.location.search);
    const discipline = urlParams.get('discipline')?.toLowerCase() || 'all';
    filterButtons.forEach(btn => {
      if (btn.getAttribute('data-discipline') === discipline) {
        btn.classList.add('active');
      } else {
        btn.classList.remove('active');
      }
    });

    // Filter functionality
    filterButtons.forEach(button => {
      button.addEventListener('click', (e) => {
        e.preventDefault(); // Prevent default link behavior
        const discipline = button.getAttribute('data-discipline') || 'all';
        
        // Update URL without page reload
        const url = new URL(window.location.href);
        if (discipline === 'all') {
          url.searchParams.delete('discipline');
        } else {
          url.searchParams.set('discipline', discipline);
        }
        window.history.pushState({}, '', url);
        
        // Update active button
        filterButtons.forEach(btn => btn.classList.remove('active'));
        button.classList.add('active');

        // Filter items
        items.forEach(item => {
          if (discipline === 'all' || item.getAttribute('data-discipline') === discipline) {
            item.classList.remove('hidden');
          } else {
            item.classList.add('hidden');
          }
        });
      });
    });

    function showExpandedView(index: number) {
      const expandedView = items[index].querySelector('.expanded-view');
      expandedView?.classList.add('active');
      currentIndex = index;
    }

    function hideExpandedView() {
      const activeView = document.querySelector('.expanded-view.active');
      if (activeView) {
        activeView.classList.remove('active');
      }
    }

    function showNext() {
      hideExpandedView();
      // Find next visible item
      let nextIndex = (currentIndex + 1) % items.length;
      while (items[nextIndex].classList.contains('hidden')) {
        nextIndex = (nextIndex + 1) % items.length;
      }
      currentIndex = nextIndex;
      showExpandedView(currentIndex);
    }

    function showPrev() {
      hideExpandedView();
      // Find previous visible item
      let prevIndex = (currentIndex - 1 + items.length) % items.length;
      while (items[prevIndex].classList.contains('hidden')) {
        prevIndex = (prevIndex - 1 + items.length) % items.length;
      }
      currentIndex = prevIndex;
      showExpandedView(currentIndex);
    }

    items.forEach((item, index) => {
      const thumbnail = item.querySelector('.thumbnail');
      const closeBtn = item.querySelector('.close-btn');
      const nextBtn = item.querySelector('.next');
      const prevBtn = item.querySelector('.prev');

      thumbnail?.addEventListener('click', () => showExpandedView(index));
      closeBtn?.addEventListener('click', (e) => {
        e.preventDefault();
        hideExpandedView();
      });
      nextBtn?.addEventListener('click', showNext);
      prevBtn?.addEventListener('click', showPrev);
    });

    // Keyboard navigation
    document.addEventListener('keydown', (e) => {
      if (!document.querySelector('.expanded-view.active')) return;
      
      switch(e.key) {
        case 'Escape':
          hideExpandedView();
          break;
        case 'ArrowRight':
          showNext();
          break;
        case 'ArrowLeft':
          showPrev();
          break;
      }
    });
  });
</script>
